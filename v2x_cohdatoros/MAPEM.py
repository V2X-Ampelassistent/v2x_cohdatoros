from v2x_cohdainterfaces.msg import *
from rclpy.node import Node

class MAPEMPublisher(Node):

    def __init__(self):
        super().__init__('MAPEM_Publisher')
        self.Publisher = self.create_publisher(MapemMapData, 'Cohda_Signals/MAPEM', 10)

    def _json_to_msg(self, json_string):
        """Mainly Generated by ChatGPT"""
        data = json_string['map']

        # Create a MapData message
        map_data_msg = MapemMapData()

        # Main fields - timestamp, revision, layer type, and layer ID
        map_data_msg.timestamp = data.get('timeStamp', 0)
        map_data_msg.msg_issue_revision = data.get('msgIssueRevision', 0)
        map_data_msg.layer_type = data.get('layerType', 0)
        map_data_msg.layer_id = data.get('layerID', 0)

        # Process intersections
        for intersection_data in data.get('intersections', []):
            intersection_msg = MapemIntersection()

            intersection_msg.name = intersection_data.get('name', '')

            # Intersection ID
            if 'id' in intersection_data:
                intersection_msg.id = MapemIntersectionID()
                intersection_msg.id.region = intersection_data['id'].get('region', 0)
                intersection_msg.id.id = intersection_data['id'].get('id', 0)

            intersection_msg.revision = intersection_data.get('revision', 0)

            # Reference Point
            if 'refPoint' in intersection_data:
                ref_point_data = intersection_data['refPoint']
                ref_point_msg = MapemReferencePoint()
                ref_point_msg.lat = ref_point_data.get('lat', 0)
                ref_point_msg.lon = ref_point_data.get('long', 0)
                ref_point_msg.elevation = ref_point_data.get('elevation', 0)
                for regional_data in ref_point_data.get('regional', []):
                    regional_msg = MapemRegional()
                    regional_msg.region_id = regional_data.get('regionId', 0)
                    regional_msg.reg_ext_value = regional_data.get('regExtValue', '')
                    ref_point_msg.regional.append(regional_msg)
                intersection_msg.ref_point = ref_point_msg

            intersection_msg.lane_width = intersection_data.get('laneWidth', 0)

            # Speed Limits
            for speed_limit_data in intersection_data.get('speedLimits', []):
                speed_limit_msg = MapemSpeedLimit()
                speed_limit_msg.type = speed_limit_data.get('type', 0)
                speed_limit_msg.speed = speed_limit_data.get('speed', 0)
                intersection_msg.speed_limits.append(speed_limit_msg)

            # Lanes
            for lane_data in intersection_data.get('laneSet', []):
                lane_msg = MapemLane()
                lane_msg.lane_id = lane_data.get('laneID', 0)
                lane_msg.name = lane_data.get('name', '')
                lane_msg.ingress_approach = lane_data.get('ingressApproach', 0)
                lane_msg.egress_approach = lane_data.get('egressApproach', 0)
                
                # Lane Attributes
                if 'laneAttributes' in lane_data:
                    lane_attr_data = lane_data['laneAttributes']
                    lane_attr_msg = MapemLaneAttributes()
                    if 'directionalUse' in lane_attr_data:
                        directionalUse = lane_attr_data.get('directionalUse', [])[0]
                        for directional in directionalUse:
                            lane_attr_msg.directional_use.append(int(directional))
                    if 'sharedWith' in lane_attr_data:
                        sharedWith = lane_attr_data.get('sharedWith', [])[0]
                        for shared in sharedWith:
                            lane_attr_msg.shared_with.append(int(shared))
                    #lane_attr_msg.lane_type = lane_attr_data.get('laneType', '')
                    lane_msg.lane_attributes = lane_attr_msg

                if 'maneuver' in lane_data:
                    maneuvers = lane_data.get('maneuver', [])[0]
                    for mymaneuver in maneuvers:
                        lane_msg.maneuvers.append(int(mymaneuver))

                # Node List
                if 'nodeList' in lane_data:
                    lane_msg.node_list = MapemNodeList()
                    lane_msg.node_list.type = str(lane_data.get('nodeList', ''))

                # Connections
                for connect_data in lane_data.get('connectsTo', []):
                    connection_msg = MapemConnection()
                    if 'connectingLane' in connect_data:
                        connecting_lane_data = connect_data['connectingLane']
                        connecting_lane_msg = MapemConnectingLane()
                        connecting_lane_msg.lane = connecting_lane_data.get('lane', 0)
                        if 'maneuver' in connecting_lane_data:
                            maneuvers = connecting_lane_data.get('maneuver', [])[0]
                            for mymaneuver in maneuvers:
                                connecting_lane_msg.maneuver.append(int(mymaneuver))
                        connection_msg.connecting_lane = connecting_lane_msg

                    if 'remoteIntersection' in connect_data:
                        remote_intersection_data = connect_data['remoteIntersection']
                        remote_intersection_msg = MapemRemoteIntersection()
                        remote_intersection_msg.region = remote_intersection_data.get('region', 0)
                        remote_intersection_msg.id = remote_intersection_data.get('id', 0)
                        connection_msg.remote_intersection = remote_intersection_msg

                    connection_msg.signal_group = connect_data.get('signalGroup', 0)
                    connection_msg.user_class = connect_data.get('userClass', 0)
                    connection_msg.connection_id = connect_data.get('connectionID', 0)

                    lane_msg.connects_to.append(connection_msg)

                intersection_msg.lane_set.append(lane_msg)

            map_data_msg.intersections.append(intersection_msg)

        # Additional fields for MapData
        if 'dataParameters' in data:
            map_data_msg.data_parameters = MapemDataParameters()
            map_data_msg.data_parameters.process_method = data['dataParameters'].get('processMethod', '')
            map_data_msg.data_parameters.process_agency = data['dataParameters'].get('processAgency', '')
            map_data_msg.data_parameters.last_checked_date = data['dataParameters'].get('lastCheckedDate', '')
            map_data_msg.data_parameters.geoid_used = data['dataParameters'].get('geoidUsed', '')

        for restriction_data in data.get('restrictionList', []):
            restriction_msg = MapemRestriction()
            restriction_msg.id = restriction_data.get('id', 0)
            for user_data in restriction_data.get('users', []):
                user_msg = MapemUserRestriction()
                user_msg.type = user_data.get('type', '')
                restriction_msg.users.append(user_msg)
            map_data_msg.restriction_list.append(restriction_msg)

        for regional_data in data.get('regional', []):
            regional_msg = MapemRegional()
            regional_msg.region_id = regional_data.get('regionId', 0)
            regional_msg.reg_ext_value = regional_data.get('regExtValue', '')
            map_data_msg.regional.append(regional_msg)

        return map_data_msg
    
    def send(self, data):
        # Convert the JSON Data to msg
        msg = self._json_to_msg(data)
        # Publish the message
        self.Publisher.publish(msg)
        # Log
        self.get_logger().info("Published Mapem")